Final Solution Improvements:
• Not use Python/Flask/FlaskView b/c I can’t inject objects into controller constructors - this would be ideal for unit testing.
• A final datastore that stores each endpoint’s configuration:
  ⁃ Redis would read in these values at application start and updated throughout application lifecycle
  ⁃ Redis would write the API requests to final datastore so they can exist in case Redis instances die and need to be recovered.
• Add logging to solution - standardize logging format.
• Add parameter sanitization to prevent against injection attacks.
• Add checked exceptions throughout.
• Separate front-end from controller code so that each service can auto-scale as required.
• Add unit testing.
• Add authentication using oAuth.
• Add better commenting.
• Re-evaluate solution to solve storage drawback.
• Add Swagger API doc.
• Add Constants.py file to have service constants instead of writing out key strings 	like ‘api’, ’count’, ‘requests’, etc.
• Add environment-specific configuration files that are read in by application.
• Store passwords in remote location, like AWS Secrets Manager
• Better commenting - All of "NOTE" comments were simply added to provide context as to what I would do differently in the correct solution or what the drawbacks are of the current, time-boxed solution.

That’s everything I can think of now!! :D

